.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SM9_SETUP 3"
.TH SM9_SETUP 3 "2022-12-13" "2.5.4" "GmSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SM9_setup, SM9_generate_master_secret, SM9_extract_public_parameters,
SM9_extract_private_key, SM9_extract_public_key \- SM9 Algorithm
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& #include <openssl/sm9.h>
\&
\& int SM9_setup(int pairing, int scheme, int hash1,
\&        SM9PublicParameters **mpk, SM9MasterSecret **msk);
\&
\& SM9MasterSecret *SM9_generate_master_secret(int pairing, int scheme, int hash1);
\& SM9PublicParameters *SM9_extract_public_parameters(SM9MasterSecret *msk);
\&
\& SM9PrivateKey *SM9_extract_private_key(SM9MasterSecret *msk,
\&        const char *id, size_t idlen);
\&
\& SM9PublicKey *SM9_extract_public_key(SM9PublicParameters *mpk,
\&        const char *id, size_t idlen);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISM9_setup()\fR calls \fISM9_generate_master_secret()\fR and \fISM9_extract_public_parameters()\fR to set up public parameters and master key for a later usage of \s-1SM9\s0 system.
.PP
\&\fISM9_setup()\fR\fIXXXXSM9_generate_master_secret()\fR\fIXSM9_extract_public_parameters()\fRXXXSM9XXXXXXXXXXXXXXXXXXX
.PP
\&\fISM9_generate_master_secret()\fR generates a new \fBSM9MasterSecret\fR structure and set its parameters including pairing type, helper functions, master secret value and master public point.
.PP
\&\fISM9_generate_master_secret()\fRXXXXXX\fBSM9MasterSecret\fR\s-1XXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
\&\fISM9_extract_public_parameters()\fR allocates an empty \fBSM9PublicParameters\fR structure and copies some parameters from the given \fBSM9MasterSecret\fR structure.
.PP
\&\fISM9_extract_public_parameters()\fRXXXXXX\fBSM9PublicParameters\fR\s-1XXXXXXXX\s0\fBSM9MasterSecret\fR\s-1XXXXXXXXXXX\s0
.PP
\&\fISM9_extract_private_key()\fR and \fISM9_extract_public_key()\fR both call \fISM9_MASTER_KEY_extract_key()\fR (but using a different identifier) to generate public or private key for \s-1SM9.\s0
.PP
\&\fISM9_extract_private_key()\fR\fIXSM9_extract_public_key()\fR\fIXXXSM9_MASTER_KEY_extract_key()\fRXXXX\fB\s-1SM9_KEY\s0\fR\s-1XXXXXXXXXXXXXXXXXXXXXXXX\s0
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
\&\fISM9_setup()\fR returns 1 on success or 0 on failure.
.PP
\&\fISM9_setup()\fRXXXXXXXXX1XXXXX0X
.PP
\&\fISM9_generate_master_secret()\fR returns a pointer to an allocated \fBSM9MasterSecret\fR structure or \s-1NULL\s0 on error.
.PP
\&\fISM9_generate_master_secret()\fRXXXXXXXXXX\fBSM9MasterSecret\fR\s-1XXXXXXXXXXXXXXXNULLX\s0
.PP
\&\fISM9_extract_public_parameters()\fR returns a pointer to an allocated \fBSM9PublicParameters\fR structure or \s-1NULL\s0 on error.
.PP
\&\fISM9_extract_public_parameters()\fRXXXXXXXXXX\fBSM9PublicParameters\fR\s-1XXXXXXXXXXXXXXXNULLX\s0
.PP
\&\fISM9_extract_private_key()\fR and \fISM9_extract_public_key()\fR return a pointer to an allocated \fB\s-1SM9_KEY\s0\fR structure or \s-1NULL\s0 on error.
.PP
\&\fISM9_extract_private_key()\fR\fIXSM9_extract_public_key()\fRXXXXXXXXXX\fB\s-1SM9_KEY\s0\fR\s-1XXXXXXXXXXXXXXXNULLX\s0
.SH "CONFORMING TO"
.IX Header "CONFORMING TO"
\&\s-1GM/T 0044\-2016 SM9\s0 Identification Cryptographic Algorithm
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIEVP_DigestInit\fR\|(3)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2014\-2019 The GmSSL Project. All Rights Reserved.
.PP
Licensed under the GmSSL license (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<http://gmssl.org/license.html>.
